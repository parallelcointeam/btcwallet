package vue

import (
	"fmt"

	"github.com/parallelcointeam/mod/chain"
	"github.com/parallelcointeam/mod/rpc/legacyrpc"
	"github.com/parallelcointeam/mod/waddrmgr"
	"github.com/parallelcointeam/mod/wallet"
	"github.com/parallelcointeam/mod/wallet/txrules"
	"github.com/parallelcointeam/pod/btcjson"
	// "github.com/parallelcointeam/pod/rpcclient"
)

var WLT *wallet.Wallet

type RPCHandlers struct {
	RPCHandlers interface{} `json:"getinfo"`
}
type BlockChain struct {
	GetInfo          *btcjson.InfoWalletResult        `json:"getinfo"`
	ListTransactions []btcjson.ListTransactionsResult `json:"listtransactions"`
	UnConfirmed      float64                          `json:"unconfirmed"`
	// GetInfo interface{} `json:"getinfo"`
}
type SendToAddress struct {
	Address string  `json:"address"`
	Label   string  `json:"label"`
	Amount  float64 `json:"amount"`
}

func (k *BlockChain) GetInfoData() {
	// GetInfo
	getinfo, err := WLT.ChainClient().(*chain.RPCClient).GetInfo()
	if err != nil {
	}
	bal, err := WLT.CalculateBalance(1)
	if err != nil {
	}
	getinfo.WalletVersion = int32(waddrmgr.LatestMgrVersion)
	getinfo.Balance = bal.ToDUO()
	getinfo.PaytxFee = float64(txrules.DefaultRelayFeePerKb)
	k.GetInfo = getinfo

	// ListTransactions
	listtransactions, _ := WLT.ListTransactions(10, 10)
	k.ListTransactions = listtransactions

	// UnConfirmed
	acctName := "default"
	account, err := WLT.AccountNumber(waddrmgr.KeyScopeBIP0044, acctName)
	if err != nil {
	}
	bals, err := WLT.CalculateAccountBalances(account, 1)
	if err != nil {
	}
	unconfirmed := (bals.Total - bals.Spendable).ToDUO()

	k.UnConfirmed = unconfirmed

	// fmt.Println("GetInfoGetInfoGetInfoGetInfoGetInfoGetInfoGetInfoGetInfoGetInfoGetInfoGetInfo", k.GetInfo)
	// fmt.Println("listtransactionslisttransactionslisttransactionslisttransactionslisttransactions", k.ListTransactions)
	// fmt.Println("k.UnConfirmed", k.UnConfirmed)

}
func (k *SendToAddress) SendDUO(vaddress string, vlabel string, vamount interface{}) {

	// amt, err := btcutil.NewAmount(vamount.(float64))
	// if err != nil {
	// }

	// pairs := map[string]btcutil.Amount{
	// 	vaddress: amt,
	// }

	// sendPairs(w, pairs, waddrmgr.DefaultAccountNum, 1, txrules.DefaultRelayFeePerKb)

	fmt.Println("----------- address::", vaddress)
	fmt.Println("----------- label::::", vlabel)
	fmt.Println("----------- amount:::", vamount)

	fmt.Println("----------- amount:::", &legacyrpc.RPCHandlers)

}
